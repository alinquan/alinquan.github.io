import{_ as s,c as a,o as n,X as p}from"./chunks/framework.402b02fe.js";const B=JSON.parse('{"title":"使用 patches 打补丁","description":"","frontmatter":{},"headers":[],"relativePath":"essay/使用patches打补丁.md","filePath":"essay/使用patches打补丁.md"}'),l={name:"essay/使用patches打补丁.md"},e=p(`<h1 id="使用-patches-打补丁" tabindex="-1">使用 patches 打补丁 <a class="header-anchor" href="#使用-patches-打补丁" aria-label="Permalink to &quot;使用 patches 打补丁&quot;">​</a></h1><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p>在日常开发中，大家都会使用到各种安装包，并不是所有安装包完全符合业务需求，很多时候就差一点点，如果直接在 node_modules 里修改，当重新执行 install 下载依赖后会发现被重置了，你的改动需要同步到团队所有成员，比较麻烦。好在，我们可以使用 patch-package 这个库来解决这类问题。一方面，它能记录第三方库代码的改动，另一方面也能将改动同步到团队每个成员。</p><h3 id="_1-安装" tabindex="-1">1.安装 <a class="header-anchor" href="#_1-安装" aria-label="Permalink to &quot;1.安装&quot;">​</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># npm</span></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">i</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">patch-package</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--save-dev</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># yarn v1.x</span></span>
<span class="line"><span style="color:#FFCB6B;">yarn</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">add</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">patch-package</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">postinstall-postinstall</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># yarn v2.x</span></span>
<span class="line"><span style="color:#FFCB6B;">yarn</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">patch</span></span></code></pre></div><h3 id="_2-修改第三方包并生成补丁" tabindex="-1">2.修改第三方包并生成补丁 <a class="header-anchor" href="#_2-修改第三方包并生成补丁" aria-label="Permalink to &quot;2.修改第三方包并生成补丁&quot;">​</a></h3><p>在 node_modules 找到需要改动的包，进行修改，然后运行 patch-package 来创建 patch 文件了。我这里用 <a href="https://element.eleme.io/" target="_blank" rel="noreferrer">element-ui</a> 来举例子</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># npm</span></span>
<span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">patch-package</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">element-ui</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># yarn</span></span>
<span class="line"><span style="color:#FFCB6B;">yarn</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">patch-package</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">element-ui</span></span></code></pre></div><p>此时根目录下会生成 patches 文件夹，且里面有你所修改的补丁包就证明补丁打成功了.</p><h3 id="_3-修改-package-json-文件" tabindex="-1">3.修改 package.json 文件 <a class="header-anchor" href="#_3-修改-package-json-文件" aria-label="Permalink to &quot;3.修改 package.json 文件&quot;">​</a></h3><p>这行加上后，项目在执行 install 下载依赖包时会自动执行打补丁。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    ...</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;">// 新增</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">postinstall</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">patch-package</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>以上是在 npm、yarn 上的使用方式，下面介绍 pnpm 方式。</p><h2 id="pnpm-patch" tabindex="-1">pnpm patch <a class="header-anchor" href="#pnpm-patch" aria-label="Permalink to &quot;pnpm patch&quot;">​</a></h2><h3 id="_1-修改第三方包" tabindex="-1">1.修改第三方包 <a class="header-anchor" href="#_1-修改第三方包" aria-label="Permalink to &quot;1.修改第三方包&quot;">​</a></h3><p>可直接在 node_modules 里修改第三方包也可执行下面指令（该指令后会在本地生成一个临时文件） 后在临时文件里修改。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 注意这里要指定对应的版本</span></span>
<span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">patch</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">vant@4.6.4</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># You can now edit the following folder: C:\\Users\\LZ\\AppData\\Local\\Temp\\39c257a7213306d3ba7d755dd58baf32</span></span></code></pre></div><h3 id="_2-提交保存补丁" tabindex="-1">2.提交保存补丁 <a class="header-anchor" href="#_2-提交保存补丁" aria-label="Permalink to &quot;2.提交保存补丁&quot;">​</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 临时文件的地址</span></span>
<span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">patch-commit</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">C:</span><span style="color:#BABED8;">\\U</span><span style="color:#C3E88D;">sers</span><span style="color:#BABED8;">\\L</span><span style="color:#C3E88D;">Z</span><span style="color:#BABED8;">\\A</span><span style="color:#C3E88D;">ppData</span><span style="color:#BABED8;">\\L</span><span style="color:#C3E88D;">ocal</span><span style="color:#BABED8;">\\T</span><span style="color:#C3E88D;">emp</span><span style="color:#BABED8;">\\3</span><span style="color:#C3E88D;">9c257a7213306d3ba7d755dd58baf32</span></span></code></pre></div><p>执行该指令后可以看到项目中生成了一个 patches/vant@4.6.4.patch的文件，同时在 package.json 中也增加了如下配置：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">pnpm</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">patchedDependencies</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">vant@4.6.4</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">patches/vant@4.6.4.patch</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">}</span></span></code></pre></div>`,21),o=[e];function t(c,r,i,y,D,h){return n(),a("div",null,o)}const E=s(l,[["render",t]]);export{B as __pageData,E as default};
